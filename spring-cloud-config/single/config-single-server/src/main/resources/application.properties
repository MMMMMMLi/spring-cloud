spring.application.name=config-server

server.port=20005

# 此处也可以使用占位符来动态指定仓库地址
# spring.cloud.config.server.git.uri=https://github.com/MMMMMMLi/configs
# --------------
# 此处动态获取配置文件的几个必须点是:
# 1. 在client端编写配置文件{bootstrap.properties}的时候,里面几个配置项的属性.
#       spring.cloud.config.name,这个的属性,就对应代码仓库里面的具体的某个url,即下面{application}对应的;
# 2. 所有的配置文件命名必须以:application-{profile}.properties命名,这样在查找配置文件的时候就会根据{profile}找到.
spring.cloud.config.server.git.uri=https://github.com/MMMMMMLi/{application}
# 这个配置项的使用场景：一套{spring-cloud-config}的服务，可以适配所有的微服务项目。
#
# 使用这个配置项，在项目启动的时候，会抛出错误信息，因为它在启动的时候，需要检测连接状态，并且默认的{application}为 app
# 解决方案：
# 1. 在代码仓库下命名一个 app 的仓库目录；
# 2. 配置一个已存在的仓库来进行连通检测，如下所示，它实现了通过连接check-repo-config仓库进行健康检测
# spring.cloud.config.server.health.repositories.check.name=check-repo
# spring.cloud.config.server.health.repositories.check.label=master
# spring.cloud.config.server.health.repositories.check.profiles=default
# 3. 关闭健康检查
spring.cloud.config.server.health.enabled=false
# --------------
# spring.cloud.config.server.git.search-paths=配置二级目录的
# private的项目仓库，需要配置用户名和密码，public的不需要
# spring.cloud.config.server.git.username=${git.username}
# spring.cloud.config.server.git.password=${git.password}

# 配置这个参数,则spring cloud config 则从本地目录读取配置
# spring.profiles.active=native
# 本地目录哪个盘
# spring.cloud.config.server.native.search-locations=file://D:\xxxx
# 当前项目哪个文件夹
# spring.cloud.config.server.native.search-locations=classpath:/config

# 属性覆盖
spring.cloud.config.server.overrides.project.name=This is Overrides Pro.  